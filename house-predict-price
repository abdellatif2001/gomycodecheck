{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.metrics import r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"kc_house_data (1).csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>...</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7129300520</td>\n",
       "      <td>20141013T000000</td>\n",
       "      <td>221900.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1180</td>\n",
       "      <td>5650</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1180</td>\n",
       "      <td>0</td>\n",
       "      <td>1955</td>\n",
       "      <td>0</td>\n",
       "      <td>98178</td>\n",
       "      <td>47.5112</td>\n",
       "      <td>-122.257</td>\n",
       "      <td>1340</td>\n",
       "      <td>5650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6414100192</td>\n",
       "      <td>20141209T000000</td>\n",
       "      <td>538000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2570</td>\n",
       "      <td>7242</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2170</td>\n",
       "      <td>400</td>\n",
       "      <td>1951</td>\n",
       "      <td>1991</td>\n",
       "      <td>98125</td>\n",
       "      <td>47.7210</td>\n",
       "      <td>-122.319</td>\n",
       "      <td>1690</td>\n",
       "      <td>7639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5631500400</td>\n",
       "      <td>20150225T000000</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>770</td>\n",
       "      <td>10000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>770</td>\n",
       "      <td>0</td>\n",
       "      <td>1933</td>\n",
       "      <td>0</td>\n",
       "      <td>98028</td>\n",
       "      <td>47.7379</td>\n",
       "      <td>-122.233</td>\n",
       "      <td>2720</td>\n",
       "      <td>8062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2487200875</td>\n",
       "      <td>20141209T000000</td>\n",
       "      <td>604000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1960</td>\n",
       "      <td>5000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1050</td>\n",
       "      <td>910</td>\n",
       "      <td>1965</td>\n",
       "      <td>0</td>\n",
       "      <td>98136</td>\n",
       "      <td>47.5208</td>\n",
       "      <td>-122.393</td>\n",
       "      <td>1360</td>\n",
       "      <td>5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1954400510</td>\n",
       "      <td>20150218T000000</td>\n",
       "      <td>510000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1680</td>\n",
       "      <td>8080</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1680</td>\n",
       "      <td>0</td>\n",
       "      <td>1987</td>\n",
       "      <td>0</td>\n",
       "      <td>98074</td>\n",
       "      <td>47.6168</td>\n",
       "      <td>-122.045</td>\n",
       "      <td>1800</td>\n",
       "      <td>7503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21608</th>\n",
       "      <td>263000018</td>\n",
       "      <td>20140521T000000</td>\n",
       "      <td>360000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1530</td>\n",
       "      <td>1131</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1530</td>\n",
       "      <td>0</td>\n",
       "      <td>2009</td>\n",
       "      <td>0</td>\n",
       "      <td>98103</td>\n",
       "      <td>47.6993</td>\n",
       "      <td>-122.346</td>\n",
       "      <td>1530</td>\n",
       "      <td>1509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21609</th>\n",
       "      <td>6600060120</td>\n",
       "      <td>20150223T000000</td>\n",
       "      <td>400000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2310</td>\n",
       "      <td>5813</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>2310</td>\n",
       "      <td>0</td>\n",
       "      <td>2014</td>\n",
       "      <td>0</td>\n",
       "      <td>98146</td>\n",
       "      <td>47.5107</td>\n",
       "      <td>-122.362</td>\n",
       "      <td>1830</td>\n",
       "      <td>7200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21610</th>\n",
       "      <td>1523300141</td>\n",
       "      <td>20140623T000000</td>\n",
       "      <td>402101.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1020</td>\n",
       "      <td>1350</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1020</td>\n",
       "      <td>0</td>\n",
       "      <td>2009</td>\n",
       "      <td>0</td>\n",
       "      <td>98144</td>\n",
       "      <td>47.5944</td>\n",
       "      <td>-122.299</td>\n",
       "      <td>1020</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21611</th>\n",
       "      <td>291310100</td>\n",
       "      <td>20150116T000000</td>\n",
       "      <td>400000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1600</td>\n",
       "      <td>2388</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1600</td>\n",
       "      <td>0</td>\n",
       "      <td>2004</td>\n",
       "      <td>0</td>\n",
       "      <td>98027</td>\n",
       "      <td>47.5345</td>\n",
       "      <td>-122.069</td>\n",
       "      <td>1410</td>\n",
       "      <td>1287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21612</th>\n",
       "      <td>1523300157</td>\n",
       "      <td>20141015T000000</td>\n",
       "      <td>325000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1020</td>\n",
       "      <td>1076</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1020</td>\n",
       "      <td>0</td>\n",
       "      <td>2008</td>\n",
       "      <td>0</td>\n",
       "      <td>98144</td>\n",
       "      <td>47.5941</td>\n",
       "      <td>-122.299</td>\n",
       "      <td>1020</td>\n",
       "      <td>1357</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>21613 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               id             date     price  bedrooms  bathrooms  \\\n",
       "0      7129300520  20141013T000000  221900.0         3          1   \n",
       "1      6414100192  20141209T000000  538000.0         3          2   \n",
       "2      5631500400  20150225T000000  180000.0         2          1   \n",
       "3      2487200875  20141209T000000  604000.0         4          3   \n",
       "4      1954400510  20150218T000000  510000.0         3          2   \n",
       "...           ...              ...       ...       ...        ...   \n",
       "21608   263000018  20140521T000000  360000.0         3          2   \n",
       "21609  6600060120  20150223T000000  400000.0         4          2   \n",
       "21610  1523300141  20140623T000000  402101.0         2          1   \n",
       "21611   291310100  20150116T000000  400000.0         3          2   \n",
       "21612  1523300157  20141015T000000  325000.0         2          1   \n",
       "\n",
       "       sqft_living  sqft_lot  floors  waterfront  view  ...  grade  \\\n",
       "0             1180      5650     1.0           0     0  ...      7   \n",
       "1             2570      7242     2.0           0     0  ...      7   \n",
       "2              770     10000     1.0           0     0  ...      6   \n",
       "3             1960      5000     1.0           0     0  ...      7   \n",
       "4             1680      8080     1.0           0     0  ...      8   \n",
       "...            ...       ...     ...         ...   ...  ...    ...   \n",
       "21608         1530      1131     3.0           0     0  ...      8   \n",
       "21609         2310      5813     2.0           0     0  ...      8   \n",
       "21610         1020      1350     2.0           0     0  ...      7   \n",
       "21611         1600      2388     2.0           0     0  ...      8   \n",
       "21612         1020      1076     2.0           0     0  ...      7   \n",
       "\n",
       "       sqft_above  sqft_basement  yr_built  yr_renovated  zipcode      lat  \\\n",
       "0            1180              0      1955             0    98178  47.5112   \n",
       "1            2170            400      1951          1991    98125  47.7210   \n",
       "2             770              0      1933             0    98028  47.7379   \n",
       "3            1050            910      1965             0    98136  47.5208   \n",
       "4            1680              0      1987             0    98074  47.6168   \n",
       "...           ...            ...       ...           ...      ...      ...   \n",
       "21608        1530              0      2009             0    98103  47.6993   \n",
       "21609        2310              0      2014             0    98146  47.5107   \n",
       "21610        1020              0      2009             0    98144  47.5944   \n",
       "21611        1600              0      2004             0    98027  47.5345   \n",
       "21612        1020              0      2008             0    98144  47.5941   \n",
       "\n",
       "          long  sqft_living15  sqft_lot15  \n",
       "0     -122.257           1340        5650  \n",
       "1     -122.319           1690        7639  \n",
       "2     -122.233           2720        8062  \n",
       "3     -122.393           1360        5000  \n",
       "4     -122.045           1800        7503  \n",
       "...        ...            ...         ...  \n",
       "21608 -122.346           1530        1509  \n",
       "21609 -122.362           1830        7200  \n",
       "21610 -122.299           1020        2007  \n",
       "21611 -122.069           1410        1287  \n",
       "21612 -122.299           1020        1357  \n",
       "\n",
       "[21613 rows x 21 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-4-151f50a07b84>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df[\"bathrooms\"][k] = 1\n"
     ]
    }
   ],
   "source": [
    "k = 0\n",
    "for i in df[\"bathrooms\"]:\n",
    "    if i<1:\n",
    "        df[\"bathrooms\"][k] = 1\n",
    "    k += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 4,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 4,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 4,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 5,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 5,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 4,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 3,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " ...]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"bathrooms\"] = df[\"bathrooms\"].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[['bedrooms','bathrooms','sqft_living','sqft_lot','floors','condition','grade','sqft_above','sqft_basement']].values\n",
    "Y = df['price'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4.00e+00, 2.00e+00, 3.00e+03, ..., 8.00e+00, 3.00e+03, 0.00e+00],\n",
       "       [3.00e+00, 2.00e+00, 1.96e+03, ..., 7.00e+00, 1.41e+03, 5.50e+02],\n",
       "       [4.00e+00, 1.00e+00, 1.14e+03, ..., 7.00e+00, 1.14e+03, 0.00e+00],\n",
       "       ...,\n",
       "       [3.00e+00, 1.00e+00, 1.38e+03, ..., 7.00e+00, 1.08e+03, 3.00e+02],\n",
       "       [3.00e+00, 1.00e+00, 1.90e+03, ..., 7.00e+00, 1.30e+03, 6.00e+02],\n",
       "       [3.00e+00, 2.00e+00, 1.49e+03, ..., 7.00e+00, 1.49e+03, 0.00e+00]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train, x_test,y_train,y_test = train_test_split(X,Y,test_size =0.2)\n",
    "# print the data\n",
    "x_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr = LinearRegression()\n",
    "lr.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "54.59527693392203"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(x_train,y_train)\n",
    "r2_score(y_test, lr.predict(x_test))*100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "poly = PolynomialFeatures(2)\n",
    "X_transformed = poly.fit_transform(X)\n",
    "poly.fit(X_transformed,Y)\n",
    "lr.fit(X_transformed,Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X[: ,1], Y, color = 'blue')\n",
    "  \n",
    "plt.plot(X, lr.predict(poly.fit_transform(X)), color = 'red')\n",
    "plt.title('Polynomial Regression')\n",
    "plt.xlabel('Temperature')\n",
    "plt.ylabel('Pressure')\n",
    "  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "64.51296138190128"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "x_test_tr = poly.fit_transform(x_test)\n",
    "l=r2_score(y_test, lr.predict(x_test_tr))*100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([690195.25811035, 269703.34335556, 291496.6558481 , ...,\n",
       "       398263.91949147, 149445.17471266, 522947.04300266])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-4.47806315e+04, -1.78883265e+04,  1.57381969e+02, -3.37548889e-01,\n",
       "       -3.28555526e+03,  5.67709964e+04,  1.09360313e+05,  4.95403353e+01,\n",
       "        1.07841633e+02])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1b79e986e50>]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "index = 6\n",
    "Xx = x_test[:, index]\n",
    "\n",
    "Z = np.array([lr.coef_[index]*x + lr.intercept_ for x in Xx])\n",
    "plt.scatter(Xx, y_test/1e6, color = \"red\")\n",
    "plt.plot(Xx, Z/1e6, color = \"green\")\n",
    "# plt.title(\"Salary vs Experience (Training set)\")\n",
    "# plt.xlabel(\"input\")\n",
    "# plt.ylabel(\"price\")\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55.567226836376314"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "r2_score(y_test, lr.predict(x_test))*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\abde llatif\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "fig, ax = plt.subplots(figsize=(17, 12))\n",
    "sns.regplot(Xx, y_test, ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#find the best train data and test data\n",
    "m=1\n",
    "for i in range(300):\n",
    "    x_train, x_test,y_train,y_test = train_test_split(X,Y,test_size =0.2)\n",
    "    # print the data\n",
    "\n",
    "    poly = PolynomialFeatures(2)\n",
    "    X_transformed = poly.fit_transform(X)\n",
    "    poly.fit(X_transformed,Y)\n",
    "    lr.fit(X_transformed,Y)\n",
    "\n",
    "    x_test_tr = poly.fit_transform(x_test)\n",
    "    l=r2_score(y_test, lr.predict(x_test_tr))*100.\n",
    "    if l > m:\n",
    "        m = r2_score(y_test, lr.predict(x_test_tr))*100.\n",
    "        x_train_f = X\n",
    "        x_test_f = x_test\n",
    "        Y_f = Y\n",
    "        y_test_f = y_test\n",
    "        \n",
    "poly = PolynomialFeatures(2)\n",
    "X_transformed = poly.fit_transform(x_train_f)\n",
    "poly.fit(X_transformed,Y_f)\n",
    "lr.fit(X_transformed,Y_f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "71.19845756336065"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test_tr = poly.fit_transform(x_test_f)\n",
    "r2_score(y_test_f, lr.predict(x_test_tr))*100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "71.19845756336065"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
